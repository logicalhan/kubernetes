/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/features/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// FeatureLister helps list Features.
// All objects returned here must be treated as read-only.
type FeatureLister interface {
	// List lists all Features in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Feature, err error)
	// Get retrieves the Feature from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Feature, error)
	FeatureListerExpansion
}

// featureLister implements the FeatureLister interface.
type featureLister struct {
	indexer cache.Indexer
}

// NewFeatureLister returns a new FeatureLister.
func NewFeatureLister(indexer cache.Indexer) FeatureLister {
	return &featureLister{indexer: indexer}
}

// List lists all Features in the indexer.
func (s *featureLister) List(selector labels.Selector) (ret []*v1alpha1.Feature, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Feature))
	})
	return ret, err
}

// Get retrieves the Feature from the index for a given name.
func (s *featureLister) Get(name string) (*v1alpha1.Feature, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("feature"), name)
	}
	return obj.(*v1alpha1.Feature), nil
}
