/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api/features/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// FeatureStatusApplyConfiguration represents an declarative configuration of the FeatureStatus type for use
// with apply.
type FeatureStatusApplyConfiguration struct {
	Class             *string                        `json:"class,omitempty"`
	Name              *string                        `json:"name,omitempty"`
	Stability         *v1alpha1.StabilityLevel       `json:"stability,omitempty"`
	Version           *string                        `json:"version,omitempty"`
	Default           *v1alpha1.FeatureEnablement    `json:"default,omitempty"`
	State             *v1alpha1.FeatureState         `json:"state,omitempty"`
	Uses              []FeatureUseApplyConfiguration `json:"uses,omitempty"`
	UseEvaluationTime *v1.Time                       `json:"useEvaluationTime,omitempty"`
}

// FeatureStatusApplyConfiguration constructs an declarative configuration of the FeatureStatus type for use with
// apply.
func FeatureStatus() *FeatureStatusApplyConfiguration {
	return &FeatureStatusApplyConfiguration{}
}

// WithClass sets the Class field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Class field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithClass(value string) *FeatureStatusApplyConfiguration {
	b.Class = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithName(value string) *FeatureStatusApplyConfiguration {
	b.Name = &value
	return b
}

// WithStability sets the Stability field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Stability field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithStability(value v1alpha1.StabilityLevel) *FeatureStatusApplyConfiguration {
	b.Stability = &value
	return b
}

// WithVersion sets the Version field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Version field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithVersion(value string) *FeatureStatusApplyConfiguration {
	b.Version = &value
	return b
}

// WithDefault sets the Default field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Default field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithDefault(value v1alpha1.FeatureEnablement) *FeatureStatusApplyConfiguration {
	b.Default = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithState(value v1alpha1.FeatureState) *FeatureStatusApplyConfiguration {
	b.State = &value
	return b
}

// WithUses adds the given value to the Uses field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Uses field.
func (b *FeatureStatusApplyConfiguration) WithUses(values ...*FeatureUseApplyConfiguration) *FeatureStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithUses")
		}
		b.Uses = append(b.Uses, *values[i])
	}
	return b
}

// WithUseEvaluationTime sets the UseEvaluationTime field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UseEvaluationTime field is set to the value of the last call.
func (b *FeatureStatusApplyConfiguration) WithUseEvaluationTime(value v1.Time) *FeatureStatusApplyConfiguration {
	b.UseEvaluationTime = &value
	return b
}
